<!DOCTYPE html>
<html >
<head>
  <meta charset="UTF-8">
  <title>Server Monitoring</title>


  <link rel='stylesheet prefetch' href='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css'>
  <link rel="stylesheet" href="stylesheets/style.css">
  <script src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
  <script src='/socket.io/socket.io.js'></script>
  <script type="text/javascript">
      const mother = 1000000000;//1G BIT = 1000000kbyte =  1000000000 byte

      var socket = io();

      socket.connect('http://localhost', {
        'reconnection': true,
        'reconnectionDelay': 500,
        'reconnectionAttempts': 10
      });
      socket.emit('clientQuery','usage_status');
      socket.on('serverSent', function (message) {
        drawChart(message);
      });
  </script>
</head>

<body>
  <div id="wrapper" >
  <!-- Sidebar -->
  <div id="sidebar-wrapper">
    <% include ./menu.ejs%>
  </div>
  <!-- Page Content -->
  <div class="page-content-wrapper">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <a href="#" class="btn btn-primary" id="menu-toggle">Menu</a>
          <!-- top  -->
          <% include ./top.ejs %>
          <p>Status</p>
          <!--  -->
        </div>
        <div class="chart-container">
          <canvas id="myChart"></canvas>
        </div>
        <script type="text/javascript">
        function drawChart (message) {
          var cpup = message[0][0].cpup;
          var memp = message[1][0].memp;
          var netp = (message[2][0].rcv + message[2][0].snd) / mother;
          var diskp = message[3][0].diskp;
          var qnum = 0;

          if (message[4][0] !== undefined) {
            qnum = message[4][0].qnum;
          }
          var warnColor = 'rgba(255, 0, 0, 1)';
          var careColor = 'rgba(255, 228, 0, 1)';
          var protectColor = 'rgba(54, 162, 235, 1)';

          Chart.pluginService.register({//PLUG IN
            beforeUpdate: function(chartInstance) {
              chartInstance.data.datasets.forEach(function(dataset) {
                dataset.backgroundColor = dataset.data.map(function(data) {
                  if ( data >= 70) return warnColor;
                  else if ( data >= 50 && data < 70 ) return careColor;
                  else return protectColor;
                })
              })
            }
          });

          Chart.defaults.global.defaultFontSize = 15;

          var ctx = $('#myChart');
          var myChart = new Chart(ctx, {
            type: 'bar',
              data: {
                labels: ["CPU Usage", "Memory Usage", "Network Usage", "Disk Usage", "SysvIPC Count"],
                datasets: [{
                  data: [cpup, memp, netp, diskp, qnum],
                  borderColor: [
                  'rgba(54, 162, 235, 1)',
                  'rgba(54, 162, 235, 1)',
                  'rgba(54, 162, 235, 1)',
                  'rgba(54, 162, 235, 1)',
                  'rgba(54, 162, 235, 1)',
                  'rgba(54, 162, 235, 1)'
                  ],
                  borderWidth: 1
                }]
              },
              options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        layout: {
                            padding: {
                              left: 0,
                              right: 0,
                              top: 40,
                              bottom: 0
                            }
                          },
                          onClick: barClickEvent,
                          legend: {
                            display: false
                          },
                          scales: {
                            yAxes: [{
                              ticks: {
                                min: 0,
                                max: 100,
                                beginAtZero:true
                              },
                            }]
                          },
                          tooltips: {
                              enabled: true
                          },
                          hover: {
                              animationDuration: 0
                          },
                          animation: {
                              duration: 1,
                              onComplete: function () {
                                var chartInstance = this.chart,
                                    ctx = chartInstance.ctx;
                                    ctx.font = Chart.helpers.fontString(17, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                                    ctx.textAlign = 'center';
                                    ctx.textBaseline = 'bottom';

                                    this.data.datasets.forEach(function (dataset, i) {
                                        var meta = chartInstance.controller.getDatasetMeta(i);
                                        meta.data.forEach(function (bar, index) {
                                            var data = dataset.data[index];
                                            ctx.fillStyle = "#000000";
                                            if (index !== 4) {//qnum
                                              data += '%';
                                            }
                                            ctx.fillText(data, bar._model.x, bar._model.y - 5);
                                        });
                                    });
                                }
                            }
                        }
            });
            function barClickEvent(event, array){

              var activePoints = myChart.getElementsAtEvent(event);

              switch (activePoints[0]._index) {
                case 0: window.location = '/usage_cpu';
                  break;
                case 1: window.location = '/usage_mem';
                  break;
                case 2: window.location = '/usage_tcp';
                  break;
                case 3: window.location = '/usage_disk';
                  break;
                case 4: window.location = '/stat_ipcq';
                  break;
                default: window.location = '/';
              }
            }
        }

        </script>

        <!-- middle -->

        <!--  -->
      </div>

      <!-- bottom -->
      <!--  -->
    </div>
  </div>

</div>
 <script src='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js'></script>
 <script src="javascripts/index.js"></script>

</body>
</html>
